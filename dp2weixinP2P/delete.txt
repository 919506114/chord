====检索界面代码===

    <div class="mui-input-group">
        <!--
                    <div class="mui-input-row ">
                        <label style="color:#cccccc;">图书馆</label>
                        @Html.Raw(ViewBag.LibHtml)
                    </div>
        -->
        <div class="mui-input-row ">
            <label style="color:#cccccc">检索途径</label>
            <select id="selFrom" name="selFrom">
                <option value="title" selected>书名</option>
                <option value="ISBN">ISBN</option>
                <option value="contributor">作者</option>
            </select>
        </div>
    </div>
    <div class="mui-input-row">
        <label style="color:#cccccc">检索词</label>
        <input id="txtWord" type="text" class="mui-input mui-input-clear" placeholder="请输入 检索词">
    </div>
    <div class="mui-content-padded">
        <button id='login' class="mui-btn mui-btn-block mui-btn-primary" onclick="search('')">检索</button>
    </div>
</div>


====BookMsg部分代码====
        <div class="mui-content-padded">
            <div class="msg-title" id="title-@item.id">@item.title</div>
            <p style="color:gray;font-size:12px">
                <span>@item.publishTime</span>-
                <span>@item.creator</span>
            </p>
            <div>@Html.Raw(item.contentHtml)</div>
            @if (String.IsNullOrEmpty(ViewBag.userName) == false)
            {
                <div style="text-align:right">
                    <button class="mui-btn  mui-btn-default" onclick="gotoEdit('@item.id')">编辑</button>
                    <button class="mui-btn mui-btn-danger" onclick="deleteMsg('@item.id')">X&nbsp;删除</button>
                </div>
            }
        </div>


======好书推荐部分代码========

    <div class='mui-input-group'>
        <div class='mui-input-row' style='border-bottom:0px'>
            <label class="leftLabel">栏目</label>
            @Html.Raw(ViewBag.SubjectHtml)
        </div>
        <div class='mui-input-row' id='divNewSubject' style='display:none;border-bottom:0px'>
            <label class="leftLabel">&nbsp;</label>
            <input type="text" id='txtSubject' name="subject" style="border:1px solid #CCCCCC;border-bottom:0px" value="@Model._subject" />
        </div>

        <div class="mui-input-row" style="border-bottom:0px">
            <label class="leftLabel">标题</label>
            <input type="text" id="title" class="mui-input mui-input-clear" style="border:1px solid #CCCCCC" name="title" value="@Model.title">
        </div>
        <div class="mui-input-row" style="border-bottom:0px;height:100px">
            <label class="leftLabel" style="width:20%;">注释</label>
            <textarea rows="6" id="remark" style="border:1px solid #CCCCCC;border-top:0px;   padding:2px" name="remark">@Model.remark</textarea>
        </div>
        <div class="mui-input-row" style="border-bottom:0px;height:100px">
            <label class="leftLabel">书目路径</label>
            <textarea rows="6" id="content" style="border:1px solid #cccccc" name="content">@Model.content</textarea>
        </div>
        <div class="mui-input-row " style="border-bottom:0px;">
            <label class="leftLabel">发布时间</label>
            <input type="text" class="mui-input mui-input-clear" style="border:1px solid #cccccc;background-color:#dddddd" disabled="disabled" name="publishTime" value="@Model.publishTime">
        </div>
        <div class="mui-input-row " style="border-bottom:0px;">
            <label class="leftLabel">发布人</label>
            <input type="text" class="mui-input mui-input-clear" style="border:1px solid #cccccc;background-color:#dddddd" disabled="disabled" name="creator" value="@Model._userName">
        </div>
    </div>

    <div class="mui-content-padded">
        <button class="mui-btn mui-btn-block mui-btn-primary" onclick="submitForm()">
            @if (String.IsNullOrEmpty(Model.id) == true) //( .id == "" || Model.id==null)
            {
                <span>发布</span>
            }
            else
            {
                <span>更新</span>
            }

        </button>

    </div>


============
        #region 不再使用

        /*
        public  long SearchOnePatronByWeiXinId(string remoteUserName,
            string libCode,
            string strWeiXinId,
            out string strBarcode,
            out string strError)
        {
            strError = "";
            strBarcode = "";

            // 从mongodb中检查是否绑定了用户
            WxUserItem userItem = WxUserDatabase.Current.GetActiveOrFirst(strWeiXinId, libCode);
            if (userItem == null)
            {
                strError = "异常的情况，未怎么图书馆时不应走到SearchPatronByWeiXinId函数。";
                return -1;
            }

            // mongodb存在
            if (String.IsNullOrEmpty(userItem.readerBarcode) == false)
            {
                strBarcode = userItem.readerBarcode;
                return 1;
            }

            // 从远程dp2library中查
            string strWord = WeiXinConst.C_WeiXinIdPrefix + strWeiXinId;
            CancellationToken cancel_token = new CancellationToken();
            string id = Guid.NewGuid().ToString();
            SearchRequest request = new SearchRequest(id,
                "searchPatron",
                "<全部>",
                strWord,
                "email",
                "left",
                "wx-patron",
                "id,cols",
                1000,
                0,
                WeiXinConst.C_Search_MaxCount);
            try
            {
                MessageConnection connection = this._channels.GetConnectionAsync(
                    this.dp2MServerUrl,
                    remoteUserName).Result;

                SearchResult result = connection.SearchAsync(
                    remoteUserName,
                    request,
                    new TimeSpan(0, 1, 0),
                    cancel_token).Result;
                if (result.ResultCount == -1)
                {
                    strError = result.ErrorInfo;
                    return -1;
                }
                if (result.ResultCount == 0)
                    return 0;

                // 找到对应的读者记录
                if (result.ResultCount > 0)
                {
                    LibItem libItem = LibDatabase.Current.GetLibByLibCode(libCode);
                    string libName = libItem.libName;
                    for (int i = 0; i < result.ResultCount; i++)
                    {
                        // 可能会检索出多笔记录，先取第一笔 todo
                        string strXml = result.Records[i].Data;
                        XmlDocument dom = new XmlDocument();
                        dom.LoadXml(strXml);
                        string strTempBarcode = DomUtil.GetNodeText(dom.DocumentElement.SelectSingleNode("barcode"));

                        // 更新到mongodb库
                        string name = "";
                        XmlNode node = dom.DocumentElement.SelectSingleNode("name");
                        if (node != null)
                            name = DomUtil.GetNodeText(node);
                        string refID = "";
                        node = dom.DocumentElement.SelectSingleNode("refID");
                        if (node != null)
                            refID = DomUtil.GetNodeText(node);

                        if (i == 0)
                        {
                            userItem.readerBarcode = strTempBarcode;
                            userItem.readerName = name;
                            userItem.xml = strXml;
                            userItem.refID = refID;
                            userItem.updateTime = DateTimeUtil.DateTimeToString(DateTime.Now);
                            WxUserDatabase.Current.Update(userItem);
                            //将第一笔设为活动状态
                            WxUserDatabase.Current.SetActive(userItem);
                            //返回的strBarcode //todo refID
                            strBarcode = strTempBarcode;
                        }
                        else
                        {
                            userItem = new WxUserItem();
                            userItem.weixinId = strWeiXinId;
                            userItem.libCode = libCode;
                            userItem.libUserName = remoteUserName;
                            userItem.libName = libName;
                            userItem.readerBarcode = strTempBarcode;
                            userItem.readerName = name;
                            userItem.xml = strXml;
                            userItem.refID = refID;
                            userItem.createTime = DateTimeUtil.DateTimeToString(DateTime.Now);
                            userItem.updateTime = userItem.createTime;
                            WxUserDatabase.Current.Add(userItem);
                        }
                    }

                    return 1;
                }

            }
            catch (AggregateException ex)
            {
                strError = MessageConnection.GetExceptionText(ex);
                goto ERROR1;
            }
            catch (Exception ex)
            {
                strError = ex.Message;
                goto ERROR1;
            }
        ERROR1:
            return -1;
        }
        */
        #endregion


============
        #region del
        // GET: Patron
        public ActionResult Index(string code, string state)
        {
            string strError = "";
            string strXml = "";
            WxUserItem activeUserItem = null;
            int nRet = this.GetReaderXml(code, state, "", out activeUserItem, out strXml);
            if (nRet == -1 || nRet == 0)
                return Content(strError);

            if (nRet == -2)// 未绑定的情况，转到绑定界面
            {
                return RedirectToAction("Bind", "Account");
            }
            // 没有设置默认账户，转到帐户管理界面
            if (nRet == -3)
            {
                return RedirectToAction("Index", "Account");
            }
            
            // 获取当前账户的信息
            PatronInfo patronInfo =null;
            nRet = dp2WeiXinService.Instance.GetPatron(activeUserItem.libUserName,
                activeUserItem.readerBarcode,
                out patronInfo,
                out strError);
            if (nRet == -1 || nRet == 0)
            {
                return Content(strError);
            }
            ViewBag.LibUserName = activeUserItem.libUserName;
            return View(patronInfo);
        }

        #endregion


===列表方式的公告

    <ul class="mui-table-view" data-bind=" foreach:model.list">
        <li class="mui-table-view-cell">

            <table class="libTable">
                <tr>
                    <td class="label">标题</td>
                    <td class="value" data-bind="text:title"></td>
                </tr>
                <tr>
                    <td class="label">内容</td>
                    <td class="value" data-bind="text:content"></td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td class="button">
                        <button class="mui-btn  mui-btn-default" data-bind="click: handleEditClick">编辑</button>
                        <button class="mui-btn mui-btn-danger" data-bind="click: remove">X&nbsp;删除</button>
                    </td>
                </tr>
            </table>
        </li>
    </ul>

====

@section Scripts {
    <script>

        //观察模型
        var model = {
            // 图书馆列表
            librarys: ko.observableArray(),
            selectedLib: ko.observable(),
            // 界面输入值
            prefix: ko.observable("-1"),
            word: ko.observable(""),
            password: ko.observable("")
        }

        //用于获取图书馆
        function getAllLib() {
            //显示等待图层
            var index = loadLayer();

            // 先删除观察数组中的已有数据
            model.librarys.removeAll();

            // 调web api
            var url = "/api/library";
            sendAjaxRequest(url, "GET", function (data) {
                for (var i = 0; i < data.length; i++) {
                    //遍历从服务器得到的结果，以push方法对该数组填充新数据
                    model.librarys.push(data[i]);
                }

                // 默认选中激活帐号的图书馆
                var libCode = $("#spanLibCode").text();
                if (libCode != null && libCode != "") {
                    $("#selLib option[value='" + libCode + "']").attr("selected", "selected");
                }

                // 关闭等待层
                layer.close(index);

            }, function (xhq, textStatus, errorThrown) {

                alert(errorThrown);
                // 关闭等待层
                layer.close(index);
            });
        }


        //$(document).ready调用是jQuery推迟函数执行的一项标准技术，
        //它直到浏览器加载并处理了文档的所有HTML元素之后才会执行。
        $(document).ready(function () {

            //绑定观察模块
            ko.applyBindings(model);
            //获取图书馆列表
            getAllLib();



            // 密码框打回车时，进行绑定
            $('#password').bind('keypress', function (event) {
                if (event.keyCode == "13") {
                    // 要先给观察模型赋值一下,鼠标没离开输入框时，观察者模型还没有值
                    model.password($('#password').val());
                    bind();
                }
            });


        })

        // 绑定账号
        function bind() {

            // 图书馆
            var lib = model.selectedLib();
            if (lib == "" || lib==null) {
                alert("您尚未选择图书馆。");
                return;
            }
            //alert(lib);
            var nIndex = lib.indexOf("*");
            var libCode = lib.substr(0, nIndex);
            var libUserName = lib.substr(nIndex + 1);
            //alert("libcode:["+libCode+"] libUserName:[" + libUserName+"]");        

            // 绑定方式
            var prefix = model.prefix().trim();
            if (prefix == "-1") {
                alert("您尚未选择绑定方式。");
                return;
            }

            //账号
            //alert("prefix[" + prefix + "]");
            var curText = $('#selPrefix option:checked').text();
            var word = model.word().trim();
            if (word == "") {
                alert("您尚未输入" + curText + "。");
                return;
            }
            //alert("word[" + word + "]");

            //密码
            var password = model.password().trim();
            if (password == "") {
                alert("您尚未输入密码。");
                return;
            }
            //alert("password[" + password + "]");

            // 微信id
            var weixinId = $("#weixinId").text();
            if (weixinId == "") {
                alert("weixinId不能为空。");
                return;
            }

            //显示等待图层
            var index = loadLayer();

            var url = "/api/wxuser";
            sendAjaxRequest(url, "POST",
                function (result) {

                    // 关闭等待层
                    layer.close(index);

                    if (result.apiResult.errorCode == -1) {
                        openMsg(result.apiResult.errorInfo);
                        return;
                    }                    

                    //清空编辑界面信息,前两项可以不清除
                    //model.selectedLib("");
                    //model.prefix("-1");
                    model.word("");
                    model.password("");

                    //openMsg("绑定成功");
                    //mui.alert('绑定成功', 'ILoveLibrary');

                    alert("绑定成功");
                   
                    //2016-5-17改为统一返回账号管理界面
                    returnUrl = "/Home/Index"; 
                    var myUrl = getRootPath() + returnUrl;
                    //mui.openWindow({
                    //    url: myUrl,
                    //    id: 'info'
                    //});
                    window.location = myUrl;
                },
                function (xhq, textStatus, errorThrown) {
                    alert(errorThrown);
                    // 关闭等待层
                    layer.close(index);
                },
                {
                    weixinId: weixinId,
                    prefix: prefix,
                    word: word,
                    password: password,
                    libCode: libCode,
                    libUserName: libUserName
                }
            );
        }

        // 绑定方式变化，账号提示信息跟着变化
        function prefixChange() {
            var curText = $('#selPrefix option:checked').text();
            if (curText == "请选择 绑定方式")
                curText = "账号";

            if (curText == "工作人员账户")
                curText = "账户名";

            $('#account').prop("placeholder", "请输入 " + curText);
            $('#lblAccount').html(curText)
        }

        // 跳转到新增绑定
        function gotoResetPassword() {

            var name = "";
            if (model.prefix() == "NB")
                name = model.word();

            var lib = "";
            if (model.selectedLib() != null && model.selectedLib() != "")
                lib = model.selectedLib();

            var myUrl = getRootPath()
                + '/Account/ResetPassword?libCode=' + encodeURIComponent(lib) + "&readerName=" + encodeURIComponent(name);

            //alert(myUrl);
            //mui.openWindow({
            //    url: myUrl,
            //    id: 'info'
            //});
            window.location = myUrl;//"/account/bind";

        }

    </script>
}

@section header {
        <h1 class="mui-title">绑定账号</h1>
}
<span id="weixinId" style="display:none">@Session[dp2weixin.service.WeiXinConst.C_Session_WeiXinId]</span>
<span id="returnUrl" style="display:none">@ViewBag.ReturnUrl</span>
<span id="spanLibCode" style="display:block">@ViewBag.LibCode</span>

    <div class="mui-input-group">
        <div class="mui-input-row ">
            <label style="color:#cccccc">图书馆</label>
            <select id="selLib" style="padding-left: 0px;width: 65%" data-bind="options:librarys,optionsText:function(item) {
                       return  item.libName; },optionsValue:function(item) {
                       return item.libCode + '*' + item.libUserName; },optionsCaption:'请选择 图书馆',value:selectedLib"></select>
        </div>
        <div class="mui-input-row ">
            <label style="color:#cccccc">绑定方式</label>
            <select id="selPrefix" name="selPrefix" onchange="prefixChange()" data-bind="value:model.prefix">
                <option value="NB">姓名</option>
                <option value="">证条码号</option>
                <option value="EM">email</option>
                <option value="TP">电话号码</option>
                <option value="ID">身份证号</option>
                <option value="CN">证号</option>
                <option value="UN">工作人员账户</option>
            </select>
        </div>
        <div class="mui-input-row ">
            <label id="lblAccount" style="color:#cccccc">账号</label>
            <input id='account' type="text" class="mui-input mui-input-clear" placeholder="请输入 账号" data-bind="value:model.word">
        </div>
        <div class="mui-input-row">
            <label style="color:#cccccc">密码</label>
            <input id="password" type="password" class="mui-input-password" placeholder="请输入 密码" data-bind="value:model.password">
        </div>
    </div>

    <div class="mui-content-padded">
        <button id='login' class="mui-btn mui-btn-block mui-btn-primary" onclick="bind()">绑定</button>
        <div class="link-area">
            <center><a href="JavaScript:void(0)" onclick="gotoResetPassword()">找回密码</a></center>
        </div>
    </div>

=======
<div class="mui-card">
    <ul class="mui-table-view " data-bind=" foreach:model.wxPatrons" style="padding-left:0px;text-align:left">
        <li class="mui-table-view-cell" style="padding-left:10px;text-align:left">
            <table style="width:100%;padding:10px">
                <tr>
                    <td style="min-width:80px;text-align:right">
                    <span data-bind="if: isActive==1" style="color:red;font-weight:bold;padding-left:0px">√</span>
                    <span style="color:#CCCCCC;padding-left:0px"> 读者：</span>
                    </td>
                    <td style="text-align:left;width:80%">
                        <span data-bind="text:readerName" style="font-size:22px"></span>
                        <span data-bind="text:readerBarcode" style="color:darkgreen;font-weight:bold;font-size:24px"></span>
                    </td>
                </tr>
                <tr>
                    <td style="color:#CCCCCC;padding-top:5px;min-width:80px;text-align:right">图书馆：</td>
                    <td style="text-align:left">
                        <span data-bind="text:libName"></span>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="width:100%;padding-top:5px">
                        <table style="width:100%;">
                            <tr>
                                <td style="min-width:70px;text-align:right">
                                    <span data-bind="ifnot: isActive==1"><button class="mui-btn  " data-bind="click: activeUser">设为默认账号</button></span>
                                </td>
                                <td width="100%" align="right">
                                    <button type="button" class="mui-btn mui-btn-danger" data-bind="click: removeUser">
                                        X&nbsp;删除
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
            <br />
        </li>
    </ul>
</div>
===============
        $(document).ready(function () {

            //$("#idTest").html(" 是否为iPhone: " + browser.versions.iPhone);

            //$(window).scroll(function () {
            //    alert("scroll");
            //    /*
            //    //获取滚动条的滑动距离
            //    var scroH = $(this).scrollTop();
            //    //滚动条的滑动距离大于等于定位元素距离浏览器顶部的距离，就固定，反之就不固定
            //    if (scroH >= navH) {
            //        $(".nav").css({ "position": "fixed", "top": 0 });

            //    } else if (scroH < navH) {
            //        $(".nav").css({ "position": "static" });
            //    }
            //    */
            //});

            $(window).resize(function () {

                var h = $(window).height();
                $("#idTest").text(h);
            });

            if (browser.versions.iPhone == true) {
                $("input").focus(function () {
                    showTopBottom(false);
                    // window.setTimeout("showTopBottom(false)", 1);
                });
                $("input").blur(function () {                   

                    window.setTimeout("showTopBottom(true)", 1);
                    //showTopBottom(true);
                });

                $("select").focus(function () {
                    showTopBottom(false);
                    //window.setTimeout("showTopBottom(false)", 1);
                });
                $("select").blur(function () {
                    window.setTimeout("showTopBottom(true)", 1);
                    //showTopBottom(true);
                });
            }
            else {
                //// 非iphone时，浏览器窗口变矮时，隐藏头尾栏
                //$(window).resize(function () {

                //    window.setTimeout("adjust()", 1);
                //    //adjust();
                //});
            }
        });




        function adjust() {
            // var w = $(document).width();
            // var h = $(document).height();
            // $("#idTest").html("[" + w + "]-[" + h + "]");
            var h = $(window).height();
            if (h <= 150) {
                showTopBottom(false);
            }
            else {
                showTopBottom(true);
            }
        }

        function showTopBottom(bShow) {
            if (bShow == true) {
                $("#divBottonTab").css('display', 'block');
                $("#myheader").css('display', 'block');
            }
            else {
                //var h = $(window).height();
                ////$("#idTest").html(h);
                //if (h > 960)
                //    return;
                $("#divBottonTab").css('display', 'none');
                $("#myheader").css('display', 'none');
            }
        }

=====
    <ul class="mui-table-view">
        <li class="mui-table-view-cell">
            <a class="mui-navigate-right" href="./OverdueInfo">
                @if (Model.OverdueCount>0)
                {<span class="mui-badge mui-badge-danger">@Model.OverdueCount</span>}
                您有<span>@Model.OverdueCount</span>条违约待交费记录。
            </a>
        </li>
        <li class="mui-table-view-cell">
            <a class="mui-navigate-right" href="./BorrowInfo">
                <table style="width:100%;vertical-align:central">
                    <tr>
                        <td style="text-align:left"><span>您有</span>@Model.BorrowCount<span>本在借册</span>，@Model.CaoQiCount<span>本超期。</span></td>
                        <td style="text-align:right;padding-right:20px">
@if (Model.CaoQiCount > 0)
{ 
                            <span class="mui-badge mui-badge-warning">@Model.CaoQiCount</span>
                            <span style="color:#cccccc;font-weight:bold">/</span>
}
@if (Model.BorrowCount > 0)
{
                            <span class="mui-badge" style="background-color:#CCCCCC;color:#333333">@Model.BorrowCount</span>
}
                        </td>
                    </tr>
                </table> 
            </a>
        </li>
        <li class="mui-table-view-cell">
            <a class="mui-navigate-right" href="./Reservation">
                <table style="width:100%;vertical-align:central">
                    <tr>
                        <td style="text-align:left"><span>您有</span>@Model.ReservationCount<span>条预约请求</span>，@Model.DaoQiCount<span>条到书</span>。</td>
                        <td style="text-align:right;padding-right:20px">
@if (Model.DaoQiCount > 0)
{
                            <span class="mui-badge mui-badge-primary">@Model.DaoQiCount</span>
                            <span style="color:#cccccc;font-weight:bold">/</span>
}
@if (Model.ReservationCount > 0)
{
                            <span class="mui-badge" style="background-color:#CCCCCC;color:#333333">@Model.ReservationCount</span>
}
                        </td>
                    </tr>
                </table>            
            </a>
        </li>
    </ul>


====index====
@section Scripts {
    <script>

        //观察模型
        var model = {
            // 图书馆列表
            librarys: ko.observableArray(),
            selectedLib: ko.observable(),
        }

        //用于获取图书馆
        function getAllLib() {
            //显示等待图层
            var index = loadLayer();

            // 先删除观察数组中的已有数据
            model.librarys.removeAll();

            // 调web api
            var url = "/api/library";
            sendAjaxRequest(url, "GET", function (data) {
                for (var i = 0; i < data.length; i++) {
                    //遍历从服务器得到的结果，以push方法对该数组填充新数据
                    model.librarys.push(data[i]);
                }

                // 设上传进来的libcode
                var libCode = $("#spanLibCode").text();
                if (libCode != null && libCode != "") {
                    $("#selLib option[value='" + libCode + "']").attr("selected", "selected");
                    model.selectedLib(libCode);
                }

                // 关闭等待层
                layer.close(index);

            }, function (xhq, textStatus, errorThrown) {

                alert(errorThrown);
                // 关闭等待层
                layer.close(index);
            });
        }


        //$(document).ready调用是jQuery推迟函数执行的一项标准技术，
        //它直到浏览器加载并处理了文档的所有HTML元素之后才会执行。
        $(document).ready(function () {

            //alert("ready");
            //获取图书馆列表
            getAllLib();

            //绑定观察模块
            ko.applyBindings(model);

            // 密码框打回车时，进行绑定
            $('#txtWord').bind('keypress', function (event) {
                //alert("test");
                if (event.keyCode == "13") {
                    // 要先给观察模型赋值一下,鼠标没离开输入框时，观察者模型还没有值
                    search();
                }
            });

            // 设一下style
            $("#myheader").css("position", "absolute");  //设置p元素的样式颜色为红色

        });



        // 检索
        function search(bNext) {

            // 先删除more
            $("#more").remove();

            var libUserName = "";
            var from = "";
            var word = "";

            // 图书馆
            var lib = model.selectedLib();
            if (lib == "" || lib == null) {
                alert("您尚未选择图书馆。");
                return;
            }
            //alert(lib);
            var nIndex = lib.indexOf("*");
            var libCode = lib.substr(0, nIndex);
            var libUserName = lib.substr(nIndex + 1);

            if (bNext == 'true') {
                from = "_N";
                word = $("#maxNo").text();
            }
            else {

                // 检查是否选择的检索途径
                from = $("#selFrom").val();
                if (from == "") {
                    alert("您尚未选择检索途径。");
                    return;
                }

                // 检查检索词
                word = $("#txtWord").val();
                if (word == "") {
                    alert("您尚未输入检索词。");
                    return;
                }
                //alert("[" + from + "]-[" + word + "]");

                var table = $("#ulResult");//$('.mui-table-view');
                table.html("");

            }

            // 调检索接口
            //显示等待图层
            var index = loadLayer();

            // 调web api
            var url = "/api/biblio?libUserName=" + encodeURIComponent(libUserName) + "&from=" + encodeURIComponent(from) + "&word=" + encodeURIComponent(word);
            sendAjaxRequest(url, "GET",
                function (result) {

                    // 关闭等待层
                    layer.close(index);

                    //alert("2");
                    if (result.apiResult.errorCode == -1) {
                        $("#searchInfo").text("检索出错:" + result.apiResult.errorInfo);
                        $("#searchInfo").css("color", "red");  //设置p元素的样式颜色为红色
                    }
                    else if (result.apiResult.errorCode == 0) {
                        $("#searchInfo").text("未命中");
                        $("#searchInfo").css("color", "red");  //设置p元素的样式颜色为红色
                    }
                    else {
                        $("#searchInfo").text("命中" + result.apiResult.errorCode + "条记录。");
                        $("#searchInfo").css("color", "darkgreen");  //设置p元素的样式颜色为红色
                    }



                    // 出错或未命中
                    if (result.apiResult.errorCode == -1 || result.apiResult.errorCode == 0) {
                        openMsg(result.apiResult.errorInfo);
                        return;
                    }

                    //alert("1");

                    var table = $("#ulResult");//$('.mui-table-view');
                    for (var i = 0; i < result.records.length; i++) {
                        var record = result.records[i];
                        var li = "<li class='mui-table-view-cell mui-collapse' > "
                            + "<a class='mui-navigate-right' href='javascript:void(0)' onclick='expand(this)'>" + record.no + " " + record.name + "</a>"
                            + "<div class='mui-collapse-content' style='display:none;'>"
                                + "<span class='pendingDetail' >"
                                    + "<label>"+record.libUserName+"|"+record.recPath+"</label>"
                                    + "<img src='../img/wait2.gif' />"
                                + "</span>"
                            + "</div>"
                            + "</li>";
                        table.append(li);

                        if (i == result.records.length - 1) {
                            $("#maxNo").text(record.no);
                        }
                    }

                    //<li class="mui-table-view-cell mui-collapse">
                    //<a class="mui-navigate-right" href="#">表单</a>
                    //<div class="mui-collapse-content">



                    //有下页的情况
                    if (result.isCanNext == true) {
                        var li1 = "<li class='mui-table-view-cell'  id='more'>"
                            + "<center><a href='javascript:void(0)' onclick='searchN()'>点击加载更多</a></center>"
                            + "</li>";
                        table.append(li1);
                    }

                    //adjust();

                    // 关闭等待层
                    //layer.close(index);

                }, function (xhq, textStatus, errorThrown) {

                    alert(errorThrown);
                    // 关闭等待层
                    layer.close(index);
                });
        }



        //预约
        function reservation(obj) {
            //alert($("input[name='ckbBarcode']:checked").length);

            var selLib = model.selectedLib();
            var myLib = $("#spanLibCode").text();
            if (selLib != myLib) //应该不会走到这里，因为当前选择的图书馆不是绑定对应的图书馆的时候，不会走到这里
            {
                alert("您绑定的图书馆与选择的图书馆不一致");
                return;
            }
            //alert(lib);
            var nIndex = myLib.indexOf("*");
            var libCode = myLib.substr(0, nIndex);
            var libUserName = myLib.substr(nIndex + 1);


            var patron = $("#patronBarcode").text();//todo 初始页面时，把绑定的patron的隐藏在一个span里
            if (patron == "")
            {
                alert("您尚未绑定图书馆账户，请先绑定账户。");
                return;
            }

            var items="";     
            $("input[name='ckbBarcode']:checked").each(function () {                
                if (items != "")
                    items += ",";
                items += $(this).val();
            });
            if (items == "") {
                alert("您尚未选择要预约的册记录。");
                return;
            }
            //alert(items);

            //显示等待图层
            var index = loadLayer();

            var url = "/api/Reservation?libUserName=" + encodeURIComponent(libUserName)
                + "&patron=" + encodeURIComponent(patron)
                + "&items=" + encodeURIComponent(items)
                + "&style=new";//创建一个预约请求
            // 调api
            sendAjaxRequest(url, "POST", function (result) {


                // 关闭等待层
                layer.close(index);

                // 显示预约结果
                var infoDiv = $(obj).parent().find(".reservationInfo").first();
                //alert(infoDiv);
                var info = result.errorInfo;

                $("input[name='ckbBarcode']").removeAttr("checked");//取消全选 

                // 出错
                if (result.errorCode == -1) {
                    $(infoDiv).text(info);
                    $(infoDiv).css("color", "red");  //设为红色

                    alert(result.errorInfo);
                    return;
                }

                if (info == "")
                    info = "提交预约申请成功";

                $(infoDiv).text(info);
                $(infoDiv).css("color", "darkgreen");  //设为绿色

            }, function (xhq, textStatus, errorThrown) {

                // 关闭等待层
                layer.close(index);

                // 显示预约结果
                var infoDiv = $(obj).parent().find("reservationInfo").first();
                var info = "访问服务器出错：[" + errorThrown + "]";
                alert(info);

                $(infoDiv).text(info);
                $(infoDiv).css("color", "red");  //设为红色                
            });
        }


        function expand(obj)
        {
            // 如果自己是展开状态，则收缩
            obj = $(obj).parent();
            var  state=$(obj).find(".mui-collapse-content").first().css("display");
            if (state == "block") { //自己本来是展开状态，要关闭   
                    $(obj).find(".mui-collapse-content").css("display", "none");
                    $(obj).removeClass("mui-active");
            }
            else {
                //其它收缩
                $(".mui-collapse-content").css("display", "none");
                $(".mui-collapse").removeClass("mui-active");

                //自己展开
                $(obj).find(".mui-collapse-content").css("display", "block");
                $(obj).addClass("mui-active");


                //检查是否已经加载过了
                var o = $(obj).find(".pendingDetail:first");
                if (o.length == 0) {
                    return;
                }
                else {
                    getDetail(o);
                }
            }
        }

        function getDetail(o) {
            // 找到下级的标签，里面存储的线索
            var mylable = o.children("label");

            // pendingDetail没有定义标签label,去掉pendingDetail状态
            if (mylable.length == 0) {
                o.html("没找到存放线索信息的lable标签");
                o.removeClass("pendingDetail");
                return;
            }

            // 取出label设置的线索信息
            var keyword = mylable.text();
            // 未给label设值，去掉pendingDetail状态
            if (keyword.length == 0) {
                o.html("线索信息为空");
                o.removeClass("pendingDetail");
                return;
            }

            // 取出图书馆账号与记录路径
            var nIndex = keyword.indexOf('|');
            var libUserName = keyword.substring(0, nIndex);
            var biblioPath = keyword.substring(nIndex + 1);
            //alert("type[" + mytype + "]-value[" + myvalue + "]");
            if (libUserName == "" || biblioPath == "") {
                o.html("记录路径值[" + keyword + "]不对，格式应该为[图书馆账号|记录路径]");
                o.removeClass("pendingDetail");
                return;
            }

            // 调api
            var url = "/api/biblio?libUserName=" + encodeURIComponent(libUserName) + "&biblioPath=" + encodeURIComponent(biblioPath);
            sendAjaxRequest(url, "GET", function (result) {

                // 出错或未命中
                if (result.errorCode == -1 || result.errorCode == 0) {
                    o.html(result.errorInfo);
                    $(o).css("color", "red");  //设置p元素的样式颜色为红色
                    o.removeClass("pendingDetail");
                    return;
                }

                var itemTables = "";
                if (result.itemList.length == 0)
                    itemTables="<div>该书没有下级册信息。</div>"

                var selLib = model.selectedLib();
                var myLib = $("#spanLibCode").text();
                var bCanReservation = false;
                var disabledAttr = " disabled='disabled' ";
                var info ="<span style='color:#cccccc;font-size:9pt'>（您尚未绑定当前选择的图书馆的账户，不能进行预约。）</span>"
                if (myLib != "" && selLib == myLib) //应该不会走到这里，因为当前选择的图书馆不是绑定对应的图书馆的时候，不会走到这里
                {
                    bCanReservation = true;
                    disabledAttr = "";
                    info = "";
                }

                for (var i = 0; i < result.itemList.length; i++) {
                    var record = result.itemList[i];

                    itemTables += "<table class='itemTable'>"
                    +"<tr>"
                    + "<td class='label'>"
                    +"        <div class='mui-input-row mui-checkbox mui-left'>"
                    +"            <label style='padding-left:30px;padding-right:0px'>册条码：</label>"
                    + "            <input name='ckbBarcode' " + disabledAttr + "  value='" + record.barcode + "' type='checkbox' style='left:0px;' />"
                    +"        </div>"
                    +"</td>"
                    +    "<td class='value'>" + record.barcode + "</td>"
                    +"</tr>"
                    +"<tr>"
                    + "<td class='label'>状态：</td>"
                    + "<td class='value'>" + record.state + "</td>"
                    + "</tr>"
                    + "<tr>"
                    + "<td class='label'>卷册：</td>"
                    + "<td class='value'>" + record.volumn + "</td>"
                    + "</tr>"
                    + "<tr>"
                    + "<td class='label'>馆藏地：</td>"
                    + "<td class='value'>" + record.location + "</td>"
                    + "</tr>"
                    + "<tr>"
                    + "<td class='label'>价格：</td>"
                    + "<td class='value'>" + record.price + "</td>"
                    + "</tr>"
                    + "<tr>"
                    + "<td class='label'>在借情况：</td>"
                    + "<td class='value'>" + record.borrowInfo + "</td>"
                    + "</tr>"
                    +"</table>";
                }

                var myHtml = "<span>" + result.summary + "</span>" + itemTables;
                if (result.itemList.length >0) {
                    myHtml += "<div class='mui-content-padded'>"
                        + "<button class='mui-btn  mui-btn-default' style='color:blue' " + disabledAttr + " onclick='reservation(this)'>加入预约列表</button>"
                        + "<div class='reservationInfo'>"+info+"</div>"
                        + "</div>";
                }

                //换成实际的值，去掉pendingDetail状态，
                o.html(myHtml);
                o.removeClass("pendingDetail");
            }, function (xhq, textStatus, errorThrown) {
                //出错，去掉pendingDetail状态
                o.html("访问服务器出错：[" + errorThrown+"]");
                o.removeClass("pendingDetail");
            });

            return;
        }


        //必须要换一个名称，被下一页使用，直接用search("true")不行
        function searchN() {
            search("true");
        }


    </script>
}

@section style {
<style type="text/css">

        TABLE.itemTable {
            text-align: left;
            background-color: white;
            width: 100%;

        }

    TABLE.itemTable TR TD {
        border-width: 0px;
        border-top-width: 1px;
        border-color: #dddddd;
        border-style: dotted;
        padding: 2px;
    }

        TABLE.itemTable TR TD.value {
            /*border-left-width: 2px;*/
            border-left:1px solid #dddddd;
            padding-left:4px;
        }

        TABLE.itemTable TR TD.arrived {
            font-weight: bolder;
                        border-left:1px solid #dddddd;
                        padding-left:4px;
        }

        TABLE.itemTable TR TD.label {
           width:100px;
           background-color:#ffffff;
           color:#666666;
        }
        
        .reservationInfo {
            /*显示预约结果的span*/
        }
    </style>
}

@section header {
    <h1 class="mui-title">书目查询</h1>
    }
<span id="spanLibCode" style="display:none">@ViewBag.LibCode</span>
<span id="maxNo" style="display:none"></span>
<span id="patronBarcode" style="display:none">@ViewBag.PatronBarcode</span>


<div id="divForm">
    <div class="mui-input-group">
        <div class="mui-input-row ">
            <label style="color:#cccccc;">图书馆</label>
            <select id="selLib" style="padding-left: 0px;width: 65%" data-bind="options:librarys,optionsText:function(item) {
                       return  item.libName; },optionsValue:function(item) {
                       return item.libCode + '*' + item.libUserName; },optionsCaption:'请选择 图书馆',value:selectedLib"></select>
        </div>

        <div class="mui-input-row ">
            <label style="color:#cccccc">检索途径</label>
            <select id="selFrom" name="selFrom">
                <option value="title" selected>书名</option>
                <option value="ISBN">ISBN</option>
                <option value="contributor">作者</option>
            </select>
        </div>
        <div class="mui-input-row">
            <label style="color:#cccccc">检索词</label>
            <input id="txtWord" type="text" class="mui-input mui-input-clear" placeholder="请输入 检索词">
        </div>
    </div>

    <div class="mui-content-padded">
        <button id='login' class="mui-btn mui-btn-block mui-btn-primary" onclick="search('')">检索</button>


    </div>
</div>

<div id="divResult">
    <!--数据列表-->
    <span style="padding-left:10px" id="searchInfo"></span>
    <ul id="ulResult" class="mui-table-view ">

    </ul>


</div>


=====checkbox========
    <ul id="ulResult" class="mui-table-view mui-table-view-chevron">
        <li class='mui-table-view-cell mui-collapse' >


                <table style='width:100%;padding:10px;text-align:left'>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            <div class="mui-input-row mui-checkbox mui-left">
                                <label style="padding-left:30px;padding-right:0px">册条码：</label>
                                <input name="checkbox" value="Item 1" type="checkbox" style="left:0px;">
                            </div>
                        </td>
                        <td>aaaa</td>
                    </tr>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            状态：
                        </td>
                        <td>bbbbbbbb</td>
                    </tr>
                </table>




                <table style='width:100%;padding:10px;text-align:left'>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            <div class="mui-input-row mui-checkbox mui-left">
                                <label style="padding-left:30px;padding-right:0px">册条码：</label>
                                <input name="checkbox" value="Item 1" type="checkbox" style="left:0px;">
                            </div>
                        </td>
                        <td>aaaa</td>
                    </tr>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            状态：
                        </td>
                        <td>bbbbbbbb</td>
                    </tr>
                </table>



                <table style='width:100%;padding:10px;text-align:left'>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            <div class="mui-input-row mui-checkbox mui-left mui-disabled">
                                <label style="padding-left:30px;padding-right:0px">册条码：</label>
                                <input name="checkbox" value="Item 1" type="checkbox" style="left:0px;" disabled="disabled">
                            </div>
                        </td>
                        <td>aaaa</td>
                    </tr>
                    <tr>
                        <td style="width:100px;text-align:right; ">
                            状态：
                        </td>
                        <td>bbbbbbbb</td>
                    </tr>
                </table>
                </li>
</ul>