@{
    ViewBag.Title = "出纳窗";
}

@{

    //<p>参数：@Request["showbtn"]-@Request["showlbl"]</p>
    // 根据url参数决定是否显示标签和按钮
    // 计算各部分宽度
    int icon = 1;
    int left = 0;
    int middle = 0;
    int right = 0;
    string readerIconStr = "<label class='col-xs-" + icon.ToString() + " control-label'><span style='font-size:22px'> <span class='glyphicon glyphicon-user'></span></span></label>";
    string readerLeftStr = "";
    string readerMiddleStr = "";
    string readerRightStr = "";
    string readerBarcodeGroupStr = "";
    string itemIconStr = "<label class='col-xs-" + icon.ToString() + " control-label'><span style='font-size:22px'> <span class='glyphicon glyphicon-book'></span></span></label>";
    string itemLeftStr = "";
    string itemMiddleStr = "";
    string itemRightStr = "";
    string itemBarcodeGroupStr = "";
    if (Request["showlbl"] == "1")
    {
        left = 2;
        readerLeftStr = "<label class='col-xs-" + left.ToString() + " control-label'>证条码号</label>";
        itemLeftStr = "<label class='col-xs-" + left.ToString() + " control-label'>册条码号</label>";
    }
    if (Request["showbtn"] == "1")
    {
        right = 2;
        readerRightStr = "<div class='col-xs-" + right.ToString() + "'>"
                        + "<button type='button' class='btn btn-default btn-lg' id='btnLoad'>装载</button>"
                        + "</div>";
        itemRightStr = "<div class='col-xs-" + right.ToString() + "'>"
                        + "<button type='button' class='btn btn-default btn-lg' id='btnDo'>借</button>"
                        + "</div>";
    }
    middle = 12 - icon - left - right;
    readerMiddleStr = "<div class='col-xs-" + middle + "'>"
                     + "<input type='text' class='form-control input-lg' id='txtReaderBarcode' placeholder='证 条码号' data-bind='value:cmdModel.editor.readerBarcode'>"
                     + @"<span class='pending' id='divReaderSummary'>
                                <label  id='readerKeyWord'></label>
                                <img src='../img/wait2.gif' />
                            </span> "
                     + "</div>";
    itemMiddleStr = "<div class='col-xs-" + middle + "'>"
                     + "<input type='text' class='form-control input-lg' id='txtItemBarcode' placeholder='册 条码号' data-bind='value:cmdModel.editor.itemBarcode'>"
                     + "</div>";

    readerBarcodeGroupStr = "<div class='form-group' id='trReaderBarcode'>"
        + readerIconStr + readerLeftStr + readerMiddleStr + readerRightStr
        + "</div>";
    itemBarcodeGroupStr = "<div class='form-group' >"
        + itemIconStr + itemLeftStr + itemMiddleStr + itemRightStr
        + "</div>";

    var formStr = "<div class='form-horizontal' role='form'>"
        + readerBarcodeGroupStr
        + itemBarcodeGroupStr
        + "</div>";


}

@section Scripts {
    <script>

        // 读者view model
        var patronVModel = {
            errorInfo: ko.observable(""),

            // 注意必须要后面带("")，可以监控对象
            patron: ko.observable("")
        };

        // 借阅信息 view model
        var borrowModel = {
            errorInfo: ko.observable(""),
            borrows: ko.observableArray(),
        }

        //操作 view model
        var cmdModel = {
            commands: ko.observableArray(),
            // 命令编辑
            editor: {
                type: ko.observable("borrow"),
                readerBarcode: ko.observable(""),
                itemBarcode: ko.observable("")
            }
        }

        //============================
        // 加载读者信息
        function loadPatron(readerBarcode) {

            //alert("loadPatron");

            if (readerBarcode == null || readerBarcode == "")
                readerBarcode = $("#txtReaderBarcode").val();

            if (readerBarcode == "") {
                //layer.alert("内部错误：加载读者信息，但未传来证条码参数。");
                alert("请输入读者证条码!");
                return -1;
            }

            //等待图层
            var index = layer.load(2, { shade: [0.5, '#EEEEEE'] })

            // 隐藏读者基本信息
            $("#readerTable").hide();
            $("#divReaderSummary").hide();

            //隐藏borrowinfo 区
            $("#borrowTable").hide();
            // 先删除可观察数组中的已有数据
            borrowModel.borrows.removeAll();



            // 从服务器api获得读者json数据
            var url = "/api/patron/" + readerBarcode;
            sendAjaxRequest(url, "GET", function (data) {
                //将返回数据绑在观察模型上
                patronVModel.errorInfo(data.apiResult.errorInfo);
                if (data.patron == null)
                    patronVModel.patron("");
                else
                    patronVModel.patron(data.patron);

                if (data.apiResult.errorCode == -1) {
                    // 不成功选中
                    $("#txtReaderBarcode").select();
                }
                else {
                    // 显示读者基本信息
                    $("#readerTable").show();
                    $("#divReaderSummary").show();
                    // 成功，焦点换到item上
                    $("#txtItemBarcode").focus();

                    // 设到读者线索上
                    var readerKeyWord= "rs-" + readerBarcode;
                    $("#divReaderSummary").html("<label  id='readerKeyWord'>" + readerKeyWord + "</label><img src='../img/wait2.gif' />");
                    // 给divReaderSummary设pending样式
                    $("#divReaderSummary").addClass("pending");

                    //alert("加pending");

                    // 加载在借册
                    loadBorrowInfo(readerBarcode);
                }

                // 关闭等待层
                layer.close(index);

            }, function (xhq, textStatus, errorThrown) {
                alertServerError(errorThrown);
                // 关闭等待层
                layer.close(index);
            }, null, false);

            return 0;
        }

        //获取借阅信息
        function loadBorrowInfo(readerBarcode) {

            if (readerBarcode == null || readerBarcode == "")
                readerBarcode = $("#txtReaderBarcode").val();

            if (readerBarcode == "") {
                //layer.alert("内部错误：加载在借册，但未传来证条码参数。");
                alert("请输入读者证条码!");
                return;
            }

            //等待图层
            //var index = loadLayer();

            //alert("loadBorrowInfo1");
            //先隐藏borrowinfo 区
            $("#borrowTable").hide();
            // 先删除可观察数组中的已有数据
            borrowModel.borrows.removeAll();

            //alert("loadBorrowInfo1-1");

            // 调web api
            var url = "/api/patron/" + readerBarcode + "?format=borrowinfo";
            sendAjaxRequest(url, "GET", function (data) {
                // 设上返回的error
                borrowModel.errorInfo(data.apiResult.errorInfo);
                if (data.apiResult.errorCode == -1) {
                    // 隐藏在借区
                    $("#borrowTable").hide();
                }
                else {
                    // 加载借阅记录
                    var list = data.borrowList;
                    if (list.length > 0) {
                        for (var i = 0; i < list.length; i++) {
                            //遍历从服务器得到的结果，以push方法对该数组填充新数据
                            borrowModel.borrows.push(list[i]);
                        }
                        $("#borrowTable").show();


                    } else {
                        // 显示没有借阅记录
                        borrowModel.errorInfo("该读者目前没有在借图书。");
                    }
                }

                // 更新summary
                window.setTimeout("fillPending()", 1);

                // 关闭等待层
                //layer.close(index);

            }, function (xhq, textStatus, errorThrown) {
                alertServerError(errorThrown);
                // 关闭等待层
                //layer.close(index);

                // 更新summary
                window.setTimeout("fillPending()", 1);
            });

        }



        // 万能函数，给样式为pending的元素填充内容
        function fillPending() {
            //return;
            //alert("fillPending");

            // 选取第一个样式为pending的元素
            var o = $(".pending:first");
            if (o.length == 0) {
                //alert("fillPending1-1");
                // 没有pending类型元素则返回
                return;
            }

            // 找到下级的标签，里面存储的线索
            var mylable = o.children("label");
            // 如果没有定义标签label，则去掉pending状态，继续下一个pending
            if (mylable.length == 0) {
                //alert("fillPending1-2");
                o.removeClass("pending");
                window.setTimeout("fillPending()", 1);
                return;
            }

            // 取出label设置的线索信息
            var keyword = mylable.text();
            // 未给label设值，去掉pending状态，继续下一个pending
            if (keyword.length == 0) {
                // alert("fillPending1-3:[" + mylable.text() + "]");
                o.removeClass("pending");
                window.setTimeout("fillPending()", 1);
                return;
            }

            // bs-为书目summary，rs-为读者summary
            // 线索信息不足，去掉pending状态，继续下一个pending
            if (keyword.length <= 3) {
                //alert("fillPending1-4");
                o.removeClass("pending");
                window.setTimeout("fillPending()", 1);
                return;
            }

            // 取出线索类型和值
            var mytype = keyword.substring(0, 3);
            var myvalue = keyword.substring(3);
            //alert("type[" + mytype + "]-value[" + myvalue + "]");

            if (mytype == "bs-") {
                var url = "/api/biblio/" + encodeURIComponent(myvalue) + "?format=summary";
                // 调api
                sendAjaxRequest(url, "GET", function (data) {
                    //换成实际的值，去掉pending状态，继续下一个pending

                    // 短25个字符...，加tip
                    var shortText = data;
                    if (shortText.length > 25)
                        shortText = shortText.substring(0, 25) + "···";
                    var myHtml = "<a href='#' data-toggle='tooltip' data-placement='right' "
                           + " title='" + data + "'>"
                           + shortText
                           + "</a>";

                    o.html(myHtml);

                    o.removeClass("pending");
                    window.setTimeout("fillPending()", 1);
                }, function (xhq, textStatus, errorThrown) {
                    //换成实际的值，去掉pending状态，继续下一个pending
                    o.html("访问服务器出错：" + errorThrown);
                    o.removeClass("pending");
                    window.setTimeout("fillPending()", 1);
                });
            }
            else if (mytype == "rs-") {
                var url = "/api/patron/" + encodeURIComponent(myvalue) + "?format=summary";
                //alert(url);

                sendAjaxRequest(url, "GET", function (data) {
                    if (data.apiResult.errorCode == -1) {
                        //alert("err1");
                        //换成实际的值，去掉pending状态，继续下一个pending
                        o.html("出错：" + data.apiResult.errorInfo);
                        o.removeClass("pending");
                        window.setTimeout("fillPending()", 1);
                    }
                    else {
                        //换成实际的值，去掉pending状态，继续下一个pending
                        //alert(data.summary);
                        o.html(data.summary);
                        o.removeClass("pending");
                        window.setTimeout("fillPending()", 1);
                    }
                }, function (xhq, textStatus, errorThrown) {
                    //换成实际的值，去掉pending状态，继续下一个pending
                    o.html("访问服务器出错：" + errorThrown);
                    o.removeClass("pending");
                    window.setTimeout("fillPending()", 1);
                });
            }
            else {
                // 继续下面的
                o.removeClass("pending");
                window.setTimeout("fillPending()", 1);
            }


            // 不能写到这里，因为上面的异常调用还没返回更新数据，会导致调多次api
            //处理下一个pending
            //window.setTimeout("fillPending()", 1);
            return;
        }



        //用于获取所有命令
        //这个似乎不需要冻结界面 todo
        function getAllCmd() {
            //显示等待图层
            var index = loadLayer();

            // 先删除可观察数组中的已有数据
            cmdModel.commands.removeAll();

            //alert("getAllCmd1");

            // 调web api
            var url = "/api/command";
            sendAjaxRequest(url, "GET", function (data) {

                //alert("getAllCmd2");
                for (var i = 0; i < data.length; i++) {
                    //遍历从服务器得到的结果，以push方法对该数组填充新数据
                    cmdModel.commands.push(data[i]);
                }

                //alert("getAllCmd3");
                // 关闭等待层
                layer.close(index);

                //alert("getAllCmd31");
                // 填充summary
                window.setTimeout("fillPending()", 1);

                //alert("getAllCmd4");

            }, function (xhq, textStatus, errorThrown) {

                //alert("getAllCmd5");
                alertServerError(errorThrown);
                // 关闭等待层
                layer.close(index);
            });
        }

        // 执行命令
        function addCmd() {
            //alert("addCmd0-" + cmdModel.editor.type() + "~" + cmdModel.editor.readerBarcode() + "~" + cmdModel.editor.itemBarcode());

            // 先检查有没有输入需要的信息
            if (cmdModel.editor.type() == "borrow" || cmdModel.editor.type == "renew") {
                if (cmdModel.editor.readerBarcode() == "") {

                    /*
                    layer.alert("请输入证条码号", { icon: 1 }, function (index) {
                        //do something
                        $("#txtReaderBarcode").focus();
                        // 关信息图层
                        layer.close(index);
                    });
                    */

                    alert("请输入证条码号!");
                    return;
                }
            }
            if (cmdModel.editor.itemBarcode() == "") {

                /*
                layer.alert("请输入册条码号!", { icon: 0 }, function (index) {
                    //do something
                    $("#txtItemBarcode").focus();
                    layer.close(index);
                });
                */

                alert("请输入册条码号!");
                return;
            }

            //显示等待图层
            var indexTop = loadLayer();

            //调 web api
            var url = "/api/command";
            var data = {
                type: cmdModel.editor.type,
                readerBarcode: cmdModel.editor.readerBarcode,
                itemBarcode: cmdModel.editor.itemBarcode
            };
            sendAjaxRequest(url, "POST", function (newItem) {
                // 返回命令执行成功
                if (newItem.state == 0) {
                    // 插入到最前面
                    cmdModel.commands.unshift(newItem); //push是加到最后面

                    // 清空册条码框
                    cmdModel.editor.itemBarcode("");

                    // 关闭图层，因为加载读者信息的函数里面也显示了图层
                    layer.close(indexTop);

                    // 刷新读者信息，注意这里传的返回的readerBarcode，因为还书不需要输入
                    loadPatron(newItem.readerBarcode);

                }
                else {
                    /*
                    //命令执行出错，弹出提示
                    layer.alert(newItem.resultInfo, { icon: 2 }, function (index) {
                        //操作失败选中册条码框
                        $("#txtItemBarcode").select();
                        $("#txtItemBarcode").focus();

                        // 一定记着关闭信息图层
                        layer.close(index);
                    });
                    */

                    // layer.alert回车无效
                    alert(newItem.resultInfo);
                    //操作失败选中册条码框
                    $("#txtItemBarcode").select();
                    $("#txtItemBarcode").focus();

                    // 关闭图层
                    layer.close(indexTop);
                }



            }, function (xhq, textStatus, errorThrown) {
                alertServerError(errorThrown);
                // 关闭等待层
                layer.close(indexTop);
            }, data);
        }

        //=================
        //$(document).ready调用是jQuery推迟函数执行的一项标准技术，
        //它直到浏览器加载并处理了文档的所有HTML元素之后才会执行。
        $(document).ready(function () {
            // 获取所有的操作命令
            getAllCmd();

            // 加载绑定
            ko.applyBindings(patronVModel, document.getElementById('divPatron'));
            ko.applyBindings(borrowModel, document.getElementById('divBorrow'));
            ko.applyBindings(cmdModel, document.getElementById('divCmd'));

            // 切换table事件
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                e.target // activated tab
                e.relatedTarget // previous tab

                // 先把输入框中的数据清除
                cmdModel.editor.readerBarcode("");
                cmdModel.editor.itemBarcode("");
                //清空绑定的读者
                patronVModel.errorInfo("");
                patronVModel.patron("");
                $("#readerTable").hide();
                $("#divReaderSummary").hide();

                //清空绑定的在借册
                borrowModel.errorInfo("");
                borrowModel.borrows.removeAll();
                $("#borrowTable").hide();

                // alert(e.target.id);
                if (e.target.id == "aReturn") {
                    $("#trReaderBarcode").hide();
                    $("#txtItemBarcode").focus();
                    $("#btnDo").text("还");
                    cmdModel.editor.type("return");

                }
                else {
                    $("#trReaderBarcode").show();
                    $("#txtReaderBarcode").focus();

                    if (e.target.id == "aBorrow") {
                        $("#btnDo").text("借");
                        cmdModel.editor.type("borrow");
                    }
                    else {
                        $("#btnDo").text("续借");
                        cmdModel.editor.type("renew");
                    }
                }
            })

            // 给装载按钮绑事件
            $("#btnLoad").click(loadPatron);
            // 给读者证条码输入框加回车事件
            $('#txtReaderBarcode').bind('keypress', function (event) {
                if (event.keyCode == "13") {
                    loadPatron();
                }
            });

            // 给执行按钮绑事件
            $("#btnDo").click(addCmd);
            // 当册条码绑回车事件
            $('#txtItemBarcode').bind('keypress', function (event) {
                if (event.keyCode == "13") {
                    cmdModel.editor.itemBarcode($('#txtItemBarcode').val());

                    addCmd();
                }
            });

            //===================
            // 证条码框获得焦点
            $("#txtReaderBarcode").focus(function () {
                $("#txtReaderBarcode").removeClass("input-lg");
                $("#txtReaderBarcode").addClass("input-lg-focus");
            });
            //失去焦点
            $("#txtReaderBarcode").blur(function () {
                $("#txtReaderBarcode").removeClass("input-lg-focus");
                $("#txtReaderBarcode").addClass("input-lg");
            });


            //===================
            // 册条码框获得焦点
            $("#txtItemBarcode").focus(function () {
                $("#txtItemBarcode").removeClass("input-lg");
                $("#txtItemBarcode").addClass("input-lg-focus");
            });
            //失去焦点
            $("#txtItemBarcode").blur(function () {
                $("#txtItemBarcode").removeClass("input-lg-focus");
                $("#txtItemBarcode").addClass("input-lg");
            });

            //读者信息与在借册一开始不显示
            $("#readerTable").hide();
            $("#divReaderSummary").hide();

            $("#borrowTable").hide();
        })

        //===========================
        // 以下是共用函数

        // 显示服务器错误
        function alertServerError(info) {

            alert("服务器返回错误：" + errorThrown);

            //layer.alert("服务器返回错误：" + errorThrown, { icon: 2 });

        }

        // 显示等待图层
        function loadLayer() {
            return layer.load(2, { shade: [0.5, '#EEEEEE'] });
        }

        // ajax请求
        function sendAjaxRequest(url, httpMethod, successCallback, errorCallback, mydata, myasync) {

            //alert("sendAjaxRequest");

            $.ajax(url, {
                type: httpMethod,
                success: successCallback,
                error: errorCallback,
                data: mydata,
                async: myasync
            });
        }
    </script>
}

@section style {
    <style type="text/css">
        /*所有需要后面填充内容的元素样式*/
        .pending {
            /*设为背景图影响效果太大了，还是元素里面加个img吧*/
            /*background-image:url("img/wait.gif");*/
        }

        /*错误提示样式*/
        .errorspan {
            color: red;
        }

        /*input 去掉边框*/
        .form-horizontal input[type="text"] {
            border: none;
        }

        /*输入框获得焦点*/
        .input-lg-focus {
            height: 66px;
            padding: 10px 16px;
            font-size: 28px;
            line-height: 1.3333333;
            border-radius: 6px;
        }

        /*当前tab*/
        .nav-tabs > li.active > a,
        .nav-tabs > li.active > a:hover,
        .nav-tabs > li.active > a:focus {
            color: #555555;
            cursor: default;
            background-color: #eeeeee;
            border: 1px solid #dddddd;
            border-bottom-color: transparent;
        }

        .well {
            min-height: 20px;
            padding: 19px;
            margin-bottom: 20px;
            background-color: #dddddd;
            /*
                background-color: #f5f5f5;
                border: 1px solid #e3e3e3;
                border-radius: 4px;
                -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
                 box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
            */
        }

        .label-default {
            background-color: #ffffff;
            color: #dddddd;
        }

        .reader-barcode {
            font-size: 28px;
            font-weight: bold;
            color: green;
        }

        .reader-name {
            font-size: 28px;
            font-weight: bold;
            color: black;
        }

        .td-right {
            text-align: right;
            color: #CCCCCC;
        }
    </style>
}

<div class="container" style="background-color:#ffffff">
    <div class="row">
        <div class="col-md-6" style="background-color:#ffffff" id="divCmd">

            <span style="font-size:20px;">
                <ul class="nav nav-tabs" id="myTab">
                    <li class="active"><a href="#" data-toggle="tab" id="aBorrow">借</a></li>
                    <li><a href="#home" data-toggle="tab" id="aReturn">还</a></li>
                    <li><a href="#home" data-toggle="tab" id="aRenew">续借</a></li>
                </ul>
            </span>
            <div class="well">
                <div class="tab-content">
                    <div class="tab-pane fade in active" id="home">
                        @Html.Raw(formStr)
                    </div>
                </div>
            </div>

            <!-- Table -->
            <h3><span class="label label-default">操作历史</span></h3>
            <div>
                <table class="table" data-bind="foreach: cmdModel.commands">
                    <tr data-bind="style: {'border-bottom': isAddLine==1 ? '2px solid #FF6666' : ' ' }">
                        <td width=" 1%" style="color:white;vertical-align:middle;text-align:center" data-bind="style: {'background-color': type=='borrow' ? '#43A102' : '#049FF1' }">
                            <span style="font-weight:bold" data-bind="text:typeString"></span>
                        </td>
                        <td width="99%">
                            <table style="padding:2px">
                                <tr>
                                    <td>
                                        <span data-bind="text:readerBarcode"></span>
                                        &nbsp;&nbsp;
                                        <span class="pending">
                                            <label style="display:inline" data-bind="text:readerBarcode=='' ? '' : 'rs-'+readerBarcode"></label>
                                            <img src="~/img/wait2.gif" />
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <table>
                                            <tr>
                                                <td valign="top">
                                                    <a data-bind="attr: { href: itemBarcodeUrl}" target="_blank">
                                                        <span  data-bind="text:itemBarcode"></span>
                                                    </a>                                                     
                                                    &nbsp;&nbsp;
                                                </td>
                                                <td valign="top">
                                                    <span class="pending">
                                                        <label style="display:inline" data-bind="text:itemBarcode=='' ? '' : 'bs-'+itemBarcode"></label>
                                                        <img src="~/img/wait2.gif" />
                                                    </span>
                                                </td>
                                            </tr>
                                        </table>

                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <span style="color:gray">操作时间&nbsp;&nbsp;</span>
                                        <span data-bind="text:operTime"></span>
                                    </td>
                                </tr>
                            </table>

                        </td>
                    </tr>
                </table>

            </div>

        </div>
        <div class="col-md-6">
            <h3><span class="label label-default">读者信息</span></h3>
            <div id="divPatron">
                <span class="errorspan" data-bind="text: patronVModel.errorInfo"></span>

                <div id="readerTable" style="border:1px solid #dddddd;border-radius: 6px;">
                    <table class="table">
                        <tr>
                            <td class="td-right"><span class="reader-name" data-bind="text: patronVModel.patron().name"></span></td>
                            <td style="vertical-align:middle">（<span data-bind="text: patronVModel.patron().department"></span>）</td>
                        </tr>
                        <tr>
                            <td class="col-xs-3 td-right" style="vertical-align:middle">读者证条码号</td>
                            <td class="col-xs-9"><span class="reader-barcode" data-bind="text: patronVModel.patron().barcode"></span></td>
                        </tr>
                        <tr>
                            <td class="td-right">读者类别</td>
                            <td data-bind="text: patronVModel.patron().readerType"> </td>
                        </tr>



                        <tr>
                            <td class="td-right">证状态</td>
                            <td data-bind="text: patronVModel.patron().state">&nbsp;</td>
                        </tr>

                        <tr>
                            <td class="td-right">失效日期</td>
                            <td data-bind="text: patronVModel.patron().expireDate"></td>
                        </tr>

                    </table>
                </div>
            </div>


            <h3><span class="label label-default">在借册</span></h3>
            <div id="divBorrow">
                <span class="errorspan" data-bind="text: borrowModel.errorInfo"></span>
                <table id="borrowTable" class="table  table-striped">
                    <thead></thead>
                    <tr>
                        <th>册条码号</th>
                        <th>续借次</th>
                        <th>借阅日期</th>
                        <th>期限</th>
                        <th>操作者</th>
                        <th>应还日期</th>
                    </tr>
                    <tbody data-bind="foreach: borrowModel.borrows">
                        <tr>
                            <td style="color:green;font-size:14.8px;font-weight:bold" >

                                <a data-bind="attr: { href: barcodeUrl}" target="_blank">
                                    <span data-bind="text: barcode"></span>
                                </a> 

                            </td>
                            <td data-bind="text:renewNo"></td>
                            <td data-bind="text:borrowDate"></td>
                            <td data-bind="text:period"></td>
                            <td data-bind="text:borrowOperator"></td>
                            <td data-bind="text:returnDate"></td>
                        </tr>
                        <tr>
                            <td colspan="6">
                                摘要：
                                <span class="pending">
                                    <label style="display:inline" data-bind="text:barcode=='' ? '' : 'bs-'+barcode"></label>
                                    <img src="~/img/wait2.gif" />
                                </span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>


        </div>
    </div>
</div>
